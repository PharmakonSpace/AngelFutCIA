name: Run CIACAM

on:
  schedule:
    - cron: '45 3 * * 1-5'   # 09:15 AM IST
    - cron: '45 4 * * 1-5'   # 10:15 AM IST
    - cron: '45 5 * * 1-5'   # 11:15 AM IST
    - cron: '41 6 * * 1-5'   # 12:15 PM IST
    - cron: '45 7 * * 1-5'   # 01:15 PM IST
    - cron: '45 8 * * 1-5'   # 02:15 PM IST
    - cron: '41 9 * * 1-5'   # 03:15 PM IST
  workflow_dispatch:

jobs:
  scrape:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      # ✅ Cache pip packages
      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # ✅ Set up virtual environment
      - name: Set up virtual environment
        run: |
          if [ ! -d ".venv" ]; then
            echo "Creating new virtual environment..."
            python -m venv .venv
            .venv/bin/pip install --upgrade pip setuptools wheel
          else
            echo "Virtual environment restored from cache."
          fi

      # ✅ Install only missing or outdated packages
      - name: Install dependencies if needed
        run: |
          .venv/bin/pip install --upgrade pip
          MISSING=$(.venv/bin/pip check 2>&1 | grep -E "requires|missing" || true)
          if [ -n "$MISSING" ]; then
            echo "Installing/upgrading missing or outdated packages..."
            .venv/bin/pip install --upgrade -r requirements.txt
          else
            echo "All packages are installed and up-to-date."
          fi

      # ✅ Load environment variables
      - name: Load environment variables
        run: |
          echo "USER_NAME=${{ secrets.USER_NAME }}" >> $GITHUB_ENV
          echo "PWD=${{ secrets.PWD }}" >> $GITHUB_ENV
          echo "TOTP_SECRET=${{ secrets.TOTP_SECRET }}" >> $GITHUB_ENV
          echo "API_KEY=${{ secrets.API_KEY }}" >> $GITHUB_ENV
          echo "TOKEN_MAP=${{ secrets.TOKEN_MAP }}" >> $GITHUB_ENV
          echo "FEED_TOKEN=${{ secrets.FEED_TOKEN }}" >> $GITHUB_ENV
          echo "SHEET_ID=${{ secrets.SHEET_ID }}" >> $GITHUB_ENV
          echo "GOOGLE_SHEETS_CREDENTIALS=${{ secrets.GOOGLE_SHEETS_CREDENTIALS }}" >> $GITHUB_ENV

      # ✅ Debug environment variables
      - name: Debug environment variables
        run: env | grep -E 'USER_NAME|PWD|TOTP_SECRET|API_KEY|TOKEN_MAP|FEED_TOKEN|SHEET_ID|GOOGLE_SHEETS_CREDENTIALS'

      # ✅ Debug installed packages
      - name: Debug installed packages
        run: .venv/bin/pip list

      # ✅ Run main script
      - name: Run AngelFut.py
        run: .venv/bin/python AngelFut.py

      # ✅ Configure Git for auto-commit
      - name: Configure Git
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

      - name: Commit and push generated files
        run: |
          git add -A
          git commit -m "Auto-commit CSV, TXT, JSON, and log files" || true
          git pull --rebase origin main || true
          git push origin main || true
